{"version":3,"sources":["components/book/BooksAPI.js","components/book/BookShelfChanger.js","components/book/Book.js","components/book/BookShelf.js","components/book/BookSearch.js","App.js","serviceWorker.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","BookShelfChanger","state","isUpdating","changeShelf","event","_this","props","onChangeShelf","setState","this","_this2","react_default","a","createElement","className","value","onChange","disabled","Component","Book","thumbnail","undefined","imageLinks","authors","join","style","width","height","backgroundImage","book_BookShelfChanger","title","BookShelf","shelfName","appLoaded","fBooks","length","map","book_Book","key","BookSearch","sBooks","isSearching","error","updateQuery","target","searchBooks","BooksAPI","updateBooks","shelvedBooks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","shelvedBook","err","return","updateBook","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Link","to","type","placeholder","App","isLoaded","Promise","resolve","_this3","_this$state","Route","exact","path","render","book_BookShelf","filter","book_BookSearch","Boolean","window","location","hostname","match","ReactDOM","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aab4edb9.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass BookShelfChanger extends Component {\r\n\tstate = {\r\n\t\tisUpdating: false\r\n\t};\r\n\r\n\tcomponentWillReceiveProps() {\r\n\t\tthis.setState({\r\n\t\t\tisUpdating: false\r\n\t\t});\r\n\t}\r\n\r\n\tchangeShelf = event => {\r\n\t\tthis.props.onChangeShelf(this.props.book, event);\r\n\t\tthis.setState({\r\n\t\t\tisUpdating: true\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={this.state.isUpdating ? 'book-shelf-changer loading' : 'book-shelf-changer'}>\r\n\t\t\t\t<select value={this.props.book.shelf} onChange={event => this.changeShelf(event)}>\r\n\t\t\t\t\t<option value=\"move\" disabled>\r\n\t\t\t\t\t\tMove to...\r\n\t\t\t\t\t</option>\r\n\t\t\t\t\t<option value=\"currentlyReading\">Currently Reading</option>\r\n\t\t\t\t\t<option value=\"wantToRead\">Want to Read</option>\r\n\t\t\t\t\t<option value=\"read\">Read</option>\r\n\t\t\t\t\t<option value=\"none\">None</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t{this.state.isUpdating && <div className=\"loader-two\" />}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nBookShelfChanger.propTypes = {\r\n\tbook: PropTypes.object.isRequired,\r\n\tonChangeShelf: PropTypes.func.isRequired\r\n};\r\n\r\nexport default BookShelfChanger;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BookShelfChanger from './BookShelfChanger';\r\n\r\nfunction Book(props) {\r\n\tconst { book, onChangeShelf } = props;\r\n\r\n\tconst width = 128;\r\n\tconst height = 188;\r\n\r\n\tconst thumbnail =\r\n\t\tbook.imageLinks === undefined\r\n\t\t\t? `https://dummyimage.com/${width}x${height}/000/fff.png&text=No+Image`\r\n\t\t\t: book.imageLinks.thumbnail;\r\n\r\n\tconst authors = book.authors === undefined ? 'Unknown Author' : book.authors.join(', ');\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<div className=\"book\">\r\n\t\t\t\t<div className=\"book-top\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"book-cover\"\r\n\t\t\t\t\t\tstyle={{ width: 128, height: 188, backgroundImage: `url(${thumbnail})` }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<BookShelfChanger book={book} onChangeShelf={onChangeShelf} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"book-title\">{book.title}</div>\r\n\t\t\t\t<div className=\"book-authors\">{authors}</div>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t);\r\n}\r\n\r\nBook.propTypes = {\r\n\tbook: PropTypes.object.isRequired,\r\n\tonChangeShelf: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Book;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Book from './Book';\r\n\r\nfunction BookShelf(props) {\r\n\treturn (\r\n\t\t<div className=\"bookshelf\">\r\n\t\t\t<h2 className=\"bookshelf-title\">{props.shelfName}</h2>\r\n\t\t\t<div className=\"bookshelf-books\">\r\n\t\t\t\t{!props.appLoaded ? (\r\n\t\t\t\t\t<div className=\"loader\" />\r\n\t\t\t\t) : props.fBooks.length <= 0 ? (\r\n\t\t\t\t\t<h3 className=\"bookshelf-status\">Empty Shelf</h3>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<ol className=\"books-grid\">\r\n\t\t\t\t\t\t{props.fBooks.map(book => (\r\n\t\t\t\t\t\t\t<Book key={book.id} book={book} onChangeShelf={props.onChangeShelf} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ol>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nBookShelf.propTypes = {\r\n\tshelfName: PropTypes.string.isRequired,\r\n\tappLoaded: PropTypes.bool.isRequired,\r\n\tfBooks: PropTypes.array.isRequired,\r\n\tonChangeShelf: PropTypes.func.isRequired\r\n};\r\n\r\nexport default BookShelf;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Book from './Book';\r\nimport { Link } from 'react-router-dom';\r\nimport * as BooksAPI from './BooksAPI';\r\n\r\nclass BookSearch extends Component {\r\n\tstate = {\r\n\t\tquery: '',\r\n\t\tsBooks: [],\r\n\t\tisSearching: false,\r\n\t\terror: false\r\n\t};\r\n\r\n\tupdateQuery = event => {\r\n\t\tthis.setState({ query: event.target.value }, () => {\r\n\t\t\tthis.searchBooks(event);\r\n\t\t});\r\n\t};\r\n\r\n\tsearchBooks = event => {\r\n\r\n\t\tconst { query } = this.state;\r\n\r\n\t\tif (query) {\r\n\t\t\tthis.setState({ isSearching: true });\r\n\t\t\tBooksAPI.search(query).then(res => {\r\n\t\t\t\tif (res.error) {\r\n\t\t\t\t\tthis.setState({ sBooks: [], isSearching: false, error: true });\r\n\t\t\t\t} else if (res) {\r\n\t\t\t\t\tthis.setState({ error: false });\r\n\t\t\t\t\tthis.updateBooks(res);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.setState({ sBooks: [] });\r\n\t\t}\r\n\t};\r\n\r\n\tupdateBooks = books => {\r\n\t\tconst { shelvedBooks } = this.props;\r\n\t\tfor (const book of books) {\r\n\t\t\tbook.shelf = 'none';\r\n\t\t\tfor (const shelvedBook of shelvedBooks) {\r\n\t\t\t\tif (book.id === shelvedBook.id) book.shelf = shelvedBook.shelf;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tsBooks: books,\r\n\t\t\tisSearching: false\r\n\t\t});\r\n\t};\r\n\r\n\tupdateBook = books => {\r\n\t\tconst {sBooks} = this.state;\r\n\t\tfor (const book of sBooks) {\r\n\t\t\tfor (const shelvedBook of books) {\r\n\t\t\t\tif (book.id === shelvedBook.id) book.shelf = shelvedBook.shelf;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState({ sBooks });\r\n\t};\r\n\r\n\tchangeShelf = (book, event) => {\r\n\t\tthis.props.onChangeShelf(book, event).then(books => this.updateBook(books));\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { sBooks } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"search-books\">\r\n\t\t\t\t<div className=\"search-books-bar\">\r\n\t\t\t\t\t<Link to=\"/\" className=\"close-search\">\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t\t<div className=\"search-books-input-wrapper\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tvalue={this.state.query}\r\n\t\t\t\t\t\t\tplaceholder=\"Search by title or author\"\r\n\t\t\t\t\t\t\tonChange={event => this.updateQuery(event)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{ this.state.error && !this.state.isSearching && (\r\n\t\t\t\t\t<div className=\"search-books-results center\">\r\n\t\t\t\t\t\t<h3>No Result Found</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{this.state.isSearching ? (\r\n\t\t\t\t\t<div className=\"loader\" />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div className=\"search-books-results\">\r\n\t\t\t\t\t\t<ol className=\"books-grid\">\r\n\t\t\t\t\t\t\t{sBooks.map(book => (\r\n\t\t\t\t\t\t\t\t<Book key={book.id} book={book} onChangeShelf={this.changeShelf} />\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nBookSearch.propTypes = {\r\n\tshelvedBooks: PropTypes.array.isRequired,\r\n\tonChangeShelf: PropTypes.func.isRequired\r\n};\r\n\r\nexport default BookSearch;","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nimport './App.css';\nimport './assets/css/loader.css';\n\nimport * as BooksAPI from './components/book/BooksAPI';\nimport BookShelf from './components/book/BookShelf';\nimport BookSearch from './components/book/BookSearch';\n\nclass App extends Component {\n\n  state = {\n\t\tbooks: [],\n\t\tisLoaded: false\n\t};\n\n\tcomponentDidMount() {\n\t\tBooksAPI.getAll().then(res => {\n\t\t\tthis.setState({\n\t\t\t\tbooks: res,\n\t\t\t\tisLoaded: true\n\t\t\t});\n\t\t});\n  }\n  \n  changeShelf = (book, event) => {\n\t\treturn new Promise(resolve => {\n\t\t\tBooksAPI.update(book, event.target.value).then(res => {\n\t\t\t\tBooksAPI.getAll().then(res => {\n\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbooks: res\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresolve(res)\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\n\n  render() {\n\n    const { isLoaded, books } = this.state;\n    return (\n      <div className=\"app\">\n        \n        <Route\n\t\t\t\t\texact\n\t\t\t\t\tpath=\"/\"\n\t\t\t\t\trender={() => (\n            <div className=\"list-books\">\n              <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n              </div>\n              <div className=\"list-books-content\">\n                <div>\n                  <BookShelf\n                    key=\"Currently Reading\"\n                    shelfName=\"Currently Reading\"\n                    appLoaded={isLoaded}\n                    fBooks={books.filter(book => book.shelf === 'currentlyReading')}\n                    onChangeShelf={this.changeShelf}\n                  />\n                  <BookShelf\n                    key=\"Want to Read\"\n                    shelfName=\"Want to Read\"\n                    appLoaded={isLoaded}\n                    fBooks={books.filter(book => book.shelf === 'wantToRead')}\n                    onChangeShelf={this.changeShelf}\n                  />\n                  <BookShelf\n                    key=\"Read\"\n                    shelfName=\"Read\"\n                    appLoaded={isLoaded}\n                    fBooks={books.filter(book => book.shelf === 'read')}\n                    onChangeShelf={this.changeShelf}\n                  />\n                </div>\n              </div>\n              <div className=\"open-search\">\n                <Link to=\"/search\">Add Book</Link>\n              </div>\n            </div>\n          )}/>\n\n          <Route\n            path=\"/search\"\n            render={() => <BookSearch shelvedBooks={books} onChangeShelf={this.changeShelf} />}\n\t\t\t\t  />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}